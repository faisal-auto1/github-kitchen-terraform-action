name: "tf_plan_from_comment"

on:
  issue_comment:
    types:
      - created
  pull_request:

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

jobs:
  comment:
    name: read_comment
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.extract.outputs.action }}
      workspace: ${{ steps.extract.outputs.workspace }}
      plan_id:  ${{ steps.extract.outputs.plan_id }}
      tfdir: ${{ steps.extract.outputs.tfdir }}
      target: ${{ steps.extract.outputs.target }}

    steps:
      - name: Read comment
        id: extract
        run: |
          body=$(echo "${{ github.event.comment.body }}")
          action=$(echo "${{ github.event.comment.body }}" | awk '{print $1}')
          workspace=$(echo "${{ github.event.comment.body }}" | awk '{print $2}')
          tfdir=$(echo "${{ github.event.comment.body }}" | awk '{print $3}')
          id=$(echo "${{ github.event.comment.body }}" | awk '{print $5}')

          if [[ "$action" == "plan" ]]; then
            target=$(echo "${{ github.event.comment.body }}" | awk '{print $4}')
            echo "workspace=$workspace" >> "$GITHUB_OUTPUT"
          elif [[ "$action" == "apply" ]]; then
            id=$(echo "${{ github.event.comment.body }}" | awk '{print $4}')
            echo "plan_id=$id" >> "$GITHUB_OUTPUT"
          else
            echo "Command not supported. exiting ..."
            exit 0
          fi
          echo "action=$action" >> "$GITHUB_OUTPUT"
          echo "tfdir=$tfdir" >> "$GITHUB_OUTPUT"
          echo "target=$target" >> "$GITHUB_OUTPUT"

      - name: check step output
        run: |
          echo "action: ${{ steps.extract.outputs.action }}"
          echo "workspace: ${{ steps.extract.outputs.workspace }}"
          echo "tfdir: ${{ steps.extract.outputs.tfdir }}"
          echo "plan_id: ${{ steps.extract.outputs.plan_id }}"
          echo "target: ${{ steps.extract.outputs.target }}"

  tf_plan:
    needs: comment
    if: startsWith(github.event.comment.body, 'plan')
    runs-on: ubuntu-latest
    name: "tf_plan"
    defaults:
      run:
        working-directory: ${{ needs.comment.outputs.tfdir }}
    steps:

      - uses: xt0rted/pull-request-comment-branch@v2
        id: comment-branch

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Checkout
        uses: actions/checkout@v1
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: Get Current Job Log URL
        uses: Tiryoh/gha-jobid-action@v1
        id: job_url
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          job_name: tf_plan

      - name: Plan
        id: plan
        run: |
          set +e
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          export TF_WORKSPACE=${{ needs.comment.outputs.workspace }}
          if [[ $TF_WORKSPACE == "prod" ]]; then
            unset VAULT_TOKEN
            export VAULT_ADDR=https://vault.prod.auto1.team
            export VAULT_TOKEN="$VAULT_TOKEN_PROD"
          elif [[ $TF_WORKSPACE == "qa" ]]; then
            export VAULT_ADDR=https://vault.qa.auto1.team
            export VAULT_TOKEN="$VAULT_TOKEN_QA"
          else
            unset VAULT_TOKEN
            export VAULT_ADDR=https://vault.prod.auto1.team
            export VAULT_TOKEN="$VAULT_TOKEN_PROD"
          fi

          export uuid=$(uuidgen)
          echo $uuid
          terraform init -reconfigure > /dev/null 2>&1
          echo "plan_uuid=$uuid" >> "$GITHUB_OUTPUT"

          if [[ "${{ needs.comment.outputs.target }}" == "-target="* ]]; then
            terraform plan -no-color ${{ needs.comment.outputs.target }} -out=/tmp/plan-$uuid
          elif [[ -z "${{ needs.comment.outputs.target }}" ]]; then
            echo "No target option given, running plan for all resources ..."
            terraform plan -no-color -out=/tmp/plan-$uuid
          else
            echo "Unable to run plan command, please check comment again."
          fi

          terraform show -no-color /tmp/plan-$uuid | tee /tmp/plan-$uuid.txt > /dev/null 2>&1

          #aws sts get-caller-identity

          #aws s3 cp /tmp/plan-$uuid s3://faisal-opsinfra-test/ --region eu-west-1

        env:
          VAULT_TOKEN_QA: ${{ secrets.VAULT_TOKEN_QA }}
          VAULT_TOKEN_PROD: ${{ secrets.VAULT_TOKEN_PROD }}

        continue-on-error: true

      - name: Comment on Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |

            const fs = require('fs');
            let data = fs.readFileSync("/tmp/plan-${{ steps.plan.outputs.plan_uuid }}.txt", 'utf8');
            const MAX_GITHUB_COMMENT_LENGTH = 65536;

            if (data.length > MAX_GITHUB_COMMENT_LENGTH) {
              data = "Please review the plan in github actions logs because it's too long."
            }

            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              body: "**Terraform Cmd:** " + "`" + context.payload.comment.body + "`" + "\n\n**Terraform Plan:**\n```" + data + "```\n" + "\n**Link:** " + "${{ steps.job_url.outputs.html_url }}#step:6:1\n\n" + "**Plan ID:** " + "`" + "${{ steps.plan.outputs.plan_uuid }}" + "`" + "\n\n**How to apply :**\n\n  Please comment again with this command to apply the plan: "+ "```" + "apply" + " ${{ needs.comment.outputs.workspace }}" + " ${{ needs.comment.outputs.tfdir }}" + " ${{ steps.plan.outputs.plan_uuid }}" + "```"
            })

      - name: Comment drift
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              issue_number: context.issue.number,
              repo: context.repo.repo,
              body: "**Changes Detected**\n\nTerraform plan is not clean for: \n" + "```" + "Diectory: ${{ steps.plan.outputs.tfplan_dir }}\nWorkspace: ${{ steps.plan.outputs.tfplan_workspace }}" + "```" + "\n\n**Link: **" +  "${{ steps.job_url.outputs.html_url }}#step:6:1"
            })

  tf_apply:
    needs: comment
    if: startsWith(github.event.comment.body, 'apply')
    runs-on: ubuntu-latest
    name: "tf_apply"
    defaults:
      run:
        working-directory: ${{ needs.comment.outputs.tfdir }}

    steps:
      - uses: xt0rted/pull-request-comment-branch@v2
        id: comment-branch

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Checkout
        uses: actions/checkout@v1
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: Get Current Job Log URL
        uses: Tiryoh/gha-jobid-action@v1
        id: apply_job_url
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          job_name: tf_apply

      - name: Download plan
        run: |

          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

          cd ${{ github.workspace}}/${{ needs.comment.outputs.tfdir }}
          aws s3 cp s3://faisal-opsinfra-test/plan-${{ needs.comment.outputs.plan_id }} . --region eu-west-1
          pwd
          ls -lr

      - name: Terraform apply
        run: |
          pwd
          ls -l
          terraform init
          terraform apply -input=false plan-${{ needs.comment.outputs.plan_id }}

      - name: Comment on Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              body: "**Command executed for terraform apply:**\n" + "```" + context.payload.comment.body + "```" + "\n\n**Link:** " + "${{ steps.apply_job_url.outputs.html_url }}#step:6:1\n"
            })

      - name: Comment drift
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              issue_number: context.issue.number,
              repo: context.repo.repo,
              body: "**Changes Detected**\n\nTerraform plan is not clean for: \n" + "```" + "Diectory: ${{ steps.plan.outputs.tfplan_dir }}\nWorkspace: ${{ steps.plan.outputs.tfplan_workspace }}" + "```" + "\n\n**Link: **" +  "${{ steps.job_url.outputs.html_url }}#step:6:1"
            })